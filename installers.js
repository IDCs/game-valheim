"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installFullPack = exports.testFullPack = exports.installCoreRemover = exports.testCoreRemover = exports.installInSlimModLoader = exports.testInSlimModLoader = exports.installVBuildMod = exports.testVBuild = void 0;
const bluebird_1 = __importDefault(require("bluebird"));
const path_1 = __importDefault(require("path"));
const common_1 = require("./common");
const INVALID_DIRS = ['core', 'valheim_data'];
const INVALID_FILES = [common_1.DOORSTOPPER_HOOK].concat(common_1.IGNORABLE_FILES).map(file => file.toLowerCase());
function isInvalidSegment(filePathSegment, invalidCollection) {
    return invalidCollection.includes(filePathSegment);
}
function testVBuild(files, gameId) {
    if (gameId !== common_1.GAME_ID) {
        return bluebird_1.default.resolve({ supported: false, requiredFiles: [] });
    }
    const supported = files.find(file => path_1.default.extname(file) === common_1.VBUILD_EXT) !== undefined;
    return bluebird_1.default.resolve({ supported, requiredFiles: [] });
}
exports.testVBuild = testVBuild;
function installVBuildMod(files, destinationPath, gameId) {
    const filtered = files.filter(file => path_1.default.extname(file) === common_1.VBUILD_EXT);
    const instructions = filtered.map(file => ({
        type: 'copy',
        source: file,
        destination: path_1.default.basename(file),
    }));
    return bluebird_1.default.resolve({ instructions });
}
exports.installVBuildMod = installVBuildMod;
function testInSlimModLoader(files, gameId) {
    if (gameId !== common_1.GAME_ID) {
        return bluebird_1.default.resolve({ supported: false, requiredFiles: [] });
    }
    const supported = files.find(file => path_1.default.basename(file) === common_1.INSLIMVML_IDENTIFIER) !== undefined;
    return bluebird_1.default.resolve({ supported, requiredFiles: [] });
}
exports.testInSlimModLoader = testInSlimModLoader;
function installInSlimModLoader(files, destinationPath, gameId) {
    const identifier = files.find(file => path_1.default.basename(file) === common_1.INSLIMVML_IDENTIFIER);
    const minSegIdx = identifier.split(path_1.default.sep).indexOf(common_1.INSLIMVML_IDENTIFIER);
    const instructions = files.reduce((accum, file) => {
        const segments = file.split(path_1.default.sep).filter(seg => !!seg);
        if (!path_1.default.extname(segments[segments.length - 1])) {
            return accum;
        }
        const destination = (segments.length >= minSegIdx + 1)
            ? segments.slice(minSegIdx).join(path_1.default.sep)
            : undefined;
        if (destination !== undefined) {
            accum.push({
                type: 'copy',
                source: file,
                destination,
            });
        }
        return accum;
    }, []);
    return bluebird_1.default.resolve({ instructions });
}
exports.installInSlimModLoader = installInSlimModLoader;
function testCoreRemover(files, gameId) {
    if (gameId !== common_1.GAME_ID) {
        return bluebird_1.default.resolve({ supported: false, requiredFiles: [] });
    }
    let supported = false;
    for (const file of files) {
        const segments = file.split(path_1.default.sep).map(seg => seg.toLowerCase());
        if ((segments.find(seg => isInvalidSegment(seg, INVALID_DIRS)) !== undefined)
            && (isInvalidSegment(segments[segments.length - 1], INVALID_FILES))) {
            supported = true;
            break;
        }
    }
    return bluebird_1.default.resolve({ supported, requiredFiles: [] });
}
exports.testCoreRemover = testCoreRemover;
function installCoreRemover(files, destinationPath, gameId) {
    let minSegIdx = 0;
    for (const file of files) {
        const segments = file.split(path_1.default.sep)
            .filter(seg => !!seg)
            .map(seg => seg.toLowerCase());
        if (segments.includes('plugins')) {
            minSegIdx = segments.indexOf('plugins');
            break;
        }
        if (segments.includes('patchers')) {
            minSegIdx = segments.indexOf('patchers');
            break;
        }
    }
    const instructions = files.reduce((accum, iter) => {
        const segments = iter.split(path_1.default.sep).filter(seg => !!seg);
        if (!segments.find(seg => isInvalidSegment(seg.toLowerCase(), INVALID_DIRS))
            && (!isInvalidSegment(segments[segments.length - 1].toLowerCase(), INVALID_FILES))
            && !!path_1.default.extname(segments[segments.length - 1])) {
            const destination = (segments.length > minSegIdx + 1)
                ? segments.slice(minSegIdx).join(path_1.default.sep)
                : undefined;
            if (destination !== undefined) {
                const instr = {
                    type: 'copy',
                    source: iter,
                    destination,
                };
                accum.push(instr);
            }
        }
        return accum;
    }, []);
    return bluebird_1.default.resolve({ instructions });
}
exports.installCoreRemover = installCoreRemover;
function testFullPack(files, gameId) {
    if (gameId !== common_1.GAME_ID) {
        return bluebird_1.default.resolve({ supported: false, requiredFiles: [] });
    }
    let supported = false;
    for (const file of files) {
        const segments = file.split(path_1.default.sep).map(seg => seg.toLowerCase());
        const coreLibIdx = segments.findIndex(seg => seg === 'core_lib');
        if (coreLibIdx === -1) {
            continue;
        }
        if (coreLibIdx > 1 && segments[coreLibIdx - 1] === 'bepinex') {
            supported = true;
            break;
        }
    }
    return bluebird_1.default.resolve({ supported, requiredFiles: [] });
}
exports.testFullPack = testFullPack;
function installFullPack(files, destinationPath, gameId) {
    let coreLibIdx = -1;
    const filtered = files.filter(file => {
        const segments = file.split(path_1.default.sep).map(seg => seg.toLowerCase());
        if (!path_1.default.extname(segments[segments.length - 1])) {
            return false;
        }
        if (coreLibIdx === -1) {
            const potentialMatch = segments.findIndex(seg => seg === 'core_lib');
            if (potentialMatch > 1 && segments[potentialMatch - 1] === 'bepinex') {
                coreLibIdx = potentialMatch;
                return true;
            }
        }
        else {
            if ((segments[coreLibIdx - 1] === 'bepinex')
                && (segments[coreLibIdx] === 'core_lib')) {
                return true;
            }
        }
        return false;
    });
    const modTypeInstr = {
        type: 'setmodtype',
        value: 'bepinex-root-mod',
    };
    const modAttribInstr = {
        type: 'attribute',
        key: 'IsCoreLibMod',
        value: 'true',
    };
    const instructions = [modTypeInstr, modAttribInstr]
        .concat(filtered.map(file => ({
        type: 'copy',
        source: file,
        destination: file.split(path_1.default.sep).slice(coreLibIdx).join(path_1.default.sep),
    })));
    return bluebird_1.default.resolve({ instructions });
}
exports.installFullPack = installFullPack;
//# sourceMappingURL=data:application/json;base64,