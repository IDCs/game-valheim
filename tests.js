"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDependencyRequired = void 0;
const bluebird_1 = __importDefault(require("bluebird"));
const vortex_api_1 = require("vortex-api");
const common_1 = require("./common");
function isDependencyRequired(api, dependencyTest) {
    const state = api.getState();
    const profile = vortex_api_1.selectors.activeProfile(state);
    if ((profile === null || profile === void 0 ? void 0 : profile.gameId) !== common_1.GAME_ID) {
        return bluebird_1.default.resolve(undefined);
    }
    const genFailedTestRes = (test) => ({
        description: {
            short: `{{masterName}} is missing`,
            long: 'You currently have a mod installed that requires {{masterName}} to function. '
                + 'please install {{masterName}} before continuing. If you confirmed that {{masterName}} '
                + 'is installed, make sure it\'s enabled AND deployed.',
            replace: { masterName: dependencyTest.masterName },
        },
        severity: 'warning',
        automaticFix: () => test()
            .catch((err) => vortex_api_1.util.opn(dependencyTest.masterURL)),
    });
    const mods = vortex_api_1.util.getSafe(state, ['persistent', 'mods', common_1.GAME_ID], {});
    const modIds = Object.keys(mods)
        .filter(id => vortex_api_1.util.getSafe(profile, ['modState', id, 'enabled'], false));
    const masterMods = modIds.filter(id => { var _a; return ((_a = mods[id]) === null || _a === void 0 ? void 0 : _a.type) === dependencyTest.masterModType; });
    let fixAppliedTest = () => {
        const testRes = hasMasterModInstalled(api, dependencyTest.masterModType);
        return testRes
            ? bluebird_1.default.resolve()
            : bluebird_1.default.reject(new vortex_api_1.util.NotFound(dependencyTest.masterModType));
    };
    if (masterMods.length > 0) {
        if (dependencyTest.requiredFiles === undefined) {
            return bluebird_1.default.resolve(undefined);
        }
        fixAppliedTest = () => bluebird_1.default.each(dependencyTest.requiredFiles, iter => vortex_api_1.fs.statAsync(iter))
            .then(() => bluebird_1.default.resolve());
        return fixAppliedTest()
            .then(() => bluebird_1.default.resolve(undefined))
            .catch(err => bluebird_1.default.resolve(genFailedTestRes(fixAppliedTest)));
    }
    const hasDependentMods = modIds.find(id => { var _a; return ((_a = mods[id]) === null || _a === void 0 ? void 0 : _a.type) === dependencyTest.dependentModType; }) !== undefined;
    if (hasDependentMods) {
        return bluebird_1.default.resolve(genFailedTestRes(fixAppliedTest));
    }
    return bluebird_1.default.resolve(undefined);
}
exports.isDependencyRequired = isDependencyRequired;
function hasMasterModInstalled(api, masterModType) {
    const state = api.getState();
    const profile = vortex_api_1.selectors.activeProfile(state);
    if ((profile === null || profile === void 0 ? void 0 : profile.gameId) !== common_1.GAME_ID) {
        return false;
    }
    const mods = vortex_api_1.util.getSafe(state, ['persistent', 'mods', common_1.GAME_ID], {});
    const modIds = Object.keys(mods)
        .filter(id => vortex_api_1.util.getSafe(profile, ['modState', id, 'enabled'], false));
    const masterMods = modIds.filter(id => { var _a; return ((_a = mods[id]) === null || _a === void 0 ? void 0 : _a.type) === masterModType; });
    return (masterMods.length > 0);
}
//# sourceMappingURL=data:application/json;base64,